// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package controller

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, 
    password, 
    email, 
    first_name, 
    last_name, 
    subscription_tier
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, username, password, email, first_name, last_name, subscription_tier, created_at
`

type CreateUserParams struct {
	Username         string
	Password         string
	Email            string
	FirstName        string
	LastName         string
	SubscriptionTier int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.SubscriptionTier,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.SubscriptionTier,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email, first_name, last_name, subscription_tier, created_at FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.SubscriptionTier,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, email, first_name, last_name, subscription_tier, created_at  FROM users 
ORDER BY id 
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.SubscriptionTier,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2 ,
    password = $3, 
    email = $4, 
    first_name = $5, 
    last_name = $6, 
    subscription_tier = $7
WHERE id = $1 
RETURNING id, username, password, email, first_name, last_name, subscription_tier, created_at
`

type UpdateUserParams struct {
	ID               int64
	Username         string
	Password         string
	Email            string
	FirstName        string
	LastName         string
	SubscriptionTier int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.SubscriptionTier,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.SubscriptionTier,
		&i.CreatedAt,
	)
	return i, err
}
