// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: subscription_tiers.sql

package controller

import (
	"context"
)

const createSubscriptionTier = `-- name: CreateSubscriptionTier :one
INSERT INTO subscription_tiers ( 
    name
) VALUES ( 
    $1 
)
RETURNING id, name, created_at
`

func (q *Queries) CreateSubscriptionTier(ctx context.Context, name string) (SubscriptionTier, error) {
	row := q.db.QueryRowContext(ctx, createSubscriptionTier, name)
	var i SubscriptionTier
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteSubscriptionTier = `-- name: DeleteSubscriptionTier :exec
DELETE FROM subscription_tiers WHERE id = $1
`

func (q *Queries) DeleteSubscriptionTier(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionTier, id)
	return err
}

const getSubscriptionTier = `-- name: GetSubscriptionTier :one
SELECT id, name, created_at FROM subscription_tiers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionTier(ctx context.Context, id int64) (SubscriptionTier, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionTier, id)
	var i SubscriptionTier
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listSubscriptionTiers = `-- name: ListSubscriptionTiers :many
SELECT id, name, created_at FROM subscription_tiers
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListSubscriptionTiersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSubscriptionTiers(ctx context.Context, arg ListSubscriptionTiersParams) ([]SubscriptionTier, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptionTiers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionTier{}
	for rows.Next() {
		var i SubscriptionTier
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionTier = `-- name: UpdateSubscriptionTier :one
UPDATE subscription_tiers 
SET name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateSubscriptionTierParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateSubscriptionTier(ctx context.Context, arg UpdateSubscriptionTierParams) (SubscriptionTier, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionTier, arg.ID, arg.Name)
	var i SubscriptionTier
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
